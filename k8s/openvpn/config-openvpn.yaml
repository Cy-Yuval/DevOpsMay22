# https://github.com/helm/charts/tree/master/stable/openvpn
apiVersion: v1
kind: ConfigMap
metadata:
  name: ovpn
  labels:
    app: ovpn
data:
  setup-certs.sh: |-
    #!/bin/bash
    EASY_RSA_LOC="/etc/openvpn/certs"
    cd $EASY_RSA_LOC
    SERVER_CERT="${EASY_RSA_LOC}/pki/issued/server.crt"
    if [ -e "$SERVER_CERT" ]
    then
      echo "found existing certs - reusing"

      # Only when use clients revocation list
      #      if [ ! -e ${EASY_RSA_LOC}/crl.pem ]
      #      then
      #        echo "generating missed crl file"
      #        ./easyrsa gen-crl
      #        cp ${EASY_RSA_LOC}/pki/crl.pem ${EASY_RSA_LOC}/crl.pem
      #        chmod 644 ${EASY_RSA_LOC}/crl.pem
      #      fi

        if [ ! -e ${EASY_RSA_LOC}/pki/ta.key ]
        then
          echo "generating missed ta.key"
          openvpn --genkey --secret ${EASY_RSA_LOC}/pki/ta.key
        fi

    else
      cp -R /usr/share/easy-rsa/* $EASY_RSA_LOC
      ./easyrsa init-pki
      echo "ca\n" | ./easyrsa build-ca nopass
      ./easyrsa build-server-full server nopass
      ./easyrsa gen-dh

      # Only when use clients revocation list
      #      ./easyrsa gen-crl
      #      cp ${EASY_RSA_LOC}/pki/crl.pem ${EASY_RSA_LOC}/crl.pem # Note: the pki/ directory is inaccessible after openvpn drops privileges, so we cp crl.pem to ${EASY_RSA_LOC} to allow CRL updates without a restart
      #      chmod 644 ${EASY_RSA_LOC}/crl.pem

      openvpn --genkey --secret ${EASY_RSA_LOC}/pki/ta.key
    fi
  newClientCert.sh: |-
      #!/bin/bash
      EASY_RSA_LOC="/etc/openvpn/certs"
      cd $EASY_RSA_LOC
      MY_IP_ADDR="$2"
      export EASYRSA_CERT_EXPIRE=$3
      ./easyrsa build-client-full $1 nopass
      cat >${EASY_RSA_LOC}/pki/$1.ovpn <<EOF
      ### BEGIN ###
      client
      nobind
      dev tun
      remote ${MY_IP_ADDR} 30767 tcp
      cipher "AES-256-CBC"

      # place here client conf

      # ubuntu DNS settings:
      script-security 2
      up /etc/openvpn/update-systemd-resolved
      up-restart
      down /etc/openvpn/update-systemd-resolved
      down-pre
      dhcp-option DOMAIN-ROUTE .

      <key>
      `cat ${EASY_RSA_LOC}/pki/private/$1.key`
      </key>
      <cert>
      `cat ${EASY_RSA_LOC}/pki/issued/$1.crt`
      </cert>
      <ca>
      `cat ${EASY_RSA_LOC}/pki/ca.crt`
      </ca>
      <tls-auth>
      `cat ${EASY_RSA_LOC}/pki/ta.key`
      </tls-auth>
      key-direction 1
      ### END ###
      EOF

      cat pki/$1.ovpn

  revokeClientCert.sh: |-
      #!/bin/bash
      EASY_RSA_LOC="/etc/openvpn/certs"
      cd $EASY_RSA_LOC
      ./easyrsa revoke $1
      ./easyrsa gen-crl
      cp ${EASY_RSA_LOC}/pki/crl.pem ${EASY_RSA_LOC}
      chmod 644 ${EASY_RSA_LOC}/crl.pem
  configure.sh: |-
      #!/bin/sh
      cidr2mask() {
         # Number of args to shift, 255..255, first non-255 byte, zeroes
         set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
         [ $1 -gt 1 ] && shift "$1" || shift
         echo ${1-0}.${2-0}.${3-0}.${4-0}
      }
      cidr2net() {
          local i ip mask netOctets octets
          ip="${1%/*}"
          mask="${1#*/}"
          octets=$(echo "$ip" | tr '.' '\n')
          for octet in $octets; do
              i=$((i+1))
              if [ $i -le $(( mask / 8)) ]; then
                  netOctets="$netOctets.$octet"
              elif [ $i -eq  $(( mask / 8 +1 )) ]; then
                  netOctets="$netOctets.$((((octet / ((256 / ((2**((mask % 8)))))))) * ((256 / ((2**((mask % 8))))))))"
              else
                  netOctets="$netOctets.0"
              fi
          done
          echo ${netOctets#.}
      }
      /etc/openvpn/setup/setup-certs.sh

      # for istio only
      #      iptables -t nat -A PREROUTING -s { { .Values.openvpn.OVPN_NETWORK } }/{ { .Values.openvpn.OVPN_SUBNET } } -i tun0 -p tcp -j REDIRECT --to-ports { { .Values.openvpn.istio.proxy.port } }

      # custom ip tables rules here
      #      iptables { { . } }

      iptables -t nat -A POSTROUTING -s 10.240.240.0/$(cidr2mask 24) -o eth0 -j MASQUERADE
      mkdir -p /dev/net
      if [ ! -c /dev/net/tun ]; then
          mknod /dev/net/tun c 10 200
      fi

      if [ "$DEBUG" == "1" ]; then
          echo ========== ${OVPN_CONFIG} ==========
          cat "${OVPN_CONFIG}"
          echo ====================================
      fi

      intAndIP="$(ip route get 8.8.8.8 | awk '/8.8.8.8/ {print $5 "-" $7}')"
      int="${intAndIP%-*}"
      ip="${intAndIP#*-}"
      cidr="$(ip addr show dev "$int" | awk -vip="$ip" '($2 ~ ip) {print $2}')"

      NETWORK="$(cidr2net $cidr)"
      NETMASK="$(cidr2mask ${cidr#*/})"
      DNS=$(cat /etc/resolv.conf | grep -v '^#' | grep nameserver | awk '{print $2}')
      SEARCH=$(cat /etc/resolv.conf | grep -v '^#' | grep search | awk '{$1=""; print $0}')
      FORMATTED_SEARCH=""
      for DOMAIN in $SEARCH; do
        FORMATTED_SEARCH="${FORMATTED_SEARCH}push \"dhcp-option DOMAIN-SEARCH ${DOMAIN}\"\n"
      done
      cp -f /etc/openvpn/setup/openvpn.conf /etc/openvpn/
      #  sed 's|OVPN_K8S_SEARCH|'"${FORMATTED_SEARCH}"'|' -i /etc/openvpn/openvpn.conf
      sed 's|OVPN_K8S_DNS|'"${DNS}"'|' -i /etc/openvpn/openvpn.conf
      sed 's|NETWORK|'"${NETWORK}"'|' -i /etc/openvpn/openvpn.conf
      sed 's|NETMASK|'"${NETMASK}"'|' -i /etc/openvpn/openvpn.conf

      # exec openvpn process so it receives lifecycle signals
      exec openvpn --config /etc/openvpn/openvpn.conf
  openvpn.conf: |-
      server 10.240.240.0 255.255.255.0  # cidr2mask 24
      verb 3

      # Only when use clients revocation list
      #      crl-verify /etc/openvpn/certs/crl.pem

      key /etc/openvpn/certs/pki/private/server.key
      ca /etc/openvpn/certs/pki/ca.crt
      cert /etc/openvpn/certs/pki/issued/server.crt
      dh /etc/openvpn/certs/pki/dh.pem
      tls-auth /etc/openvpn/certs/pki/ta.key 0
      cipher "AES-256-CBC"
      key-direction 0
      keepalive 10 60
      persist-key
      persist-tun

      proto tcp
      port  443
      dev tun0
      status /tmp/openvpn-status.log

      user nobody
      group nogroup

      # when ccd enabled
      #      client-config-dir /etc/openvpn/ccd

      push "route NETWORK NETMASK"
      push "route 10.36.0.0 255.252.0.0"    # $(cidr2mask 14)
      push "route 10.103.0.0 255.255.240.0"   # $(cidr2mask 20)
      #  OVPN_K8S_SEARCH
      push "dhcp-option DOMAIN-SEARCH cluster.local"
      push "dhcp-option DOMAIN-SEARCH svc.cluster.local"
      push "dhcp-option DOMAIN-SEARCH default.svc.cluster.local"
      push "dhcp-option DOMAIN-SEARCH infra.svc.cluster.local"
      push "dhcp-option DNS OVPN_K8S_DNS"
      # push "dhcp-option DOMAIN ${OVPN_K8S_DOMAIN}"

      # additional server conf here