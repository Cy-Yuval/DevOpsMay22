# TODO good
# Git Basics (commit, diff, branches)

1.sudo echo "1" > abc.txt
2.git status , color is : red
3.git add abc.txt ,git status, color now is: green(staged) ,git commit -m "add file abc.txt"
before commiting i had to config my name and my email by the foolowing commands:
git config --global user.email "sharon@google.com"
git config --global user.name "sharon levi"
and then commit again!
4.echo "2" >> abc.txt
5. color is : red , yes the git status is different showing : "modified" status
6.git diff
7.It doesnt show any changes because the file abc.txt is in working directory and need to be commited
8.because stage2 is unknown file or path, the command expect to get a file, the error : unknown revision or path not in the working tree.
9.git add abc.txt ,git status
10.git diff doesnt print anything because there are no new changes between working tree to staging
11.git diff --staged abc.txt
12.echo "3" >> abc.txt
13.no because the gitt diff shows the different between the working area to the staging area
the git main command shows the different between working tree to the main repository
14.because the file added to the staged area and didn't do commit , and the edit the file so the file added also the the working area as modified status.
15.git reset --hard

# TODO good
# Resolve conflicts

1.git branch
2.sudo git checkout -b feature/lambda_migration
3.first commit the new branch git files , then do sudo git merge feature/version1 and accept the file changes.
4.done throw the gui following the images examples
5.
   1.click merge
   2.click all
   3.click on right Annotate with Git Blame. and on left Annotate with Git Blame.
   4.click on accept arrow
   5.click on x symbol
6.yes the following commits were added:
for version1 branch - Restrict the extensions that can be disabled
for version2 branch -Nayaran's changes for app.py
for lambda_migration -    Merge branch 'feature/version2' into feature/lambda_migration


# Cherry picking

1.git checkout main ,git checkout -b feature/lambda_migration2
2.go to feature in the local repo and change filter to the feature/lambda_migration
3.click on chery pick  button and choose the requested commits:
    1."use correct lock type in reconnect()"
    2."Restrict the extensions that can be disabled"
4.config.json added to the branch # TODO and .env
5.yes , because we want to order the last commit made by the user .

# TODO good
# Changes in working tree and switch branches

1.git branch
2.echo "Hello World From Devops may 2022 class" > take.txt && git add take.txt
git status
3.git checkout dev , error status: Please commit your changes or stash them before you switch branches.
4.on ui choose dev checkout and choose force checkout
5.No changes are lost
6.No the file is lost , force chekcout will remove your last changes your made on the branch.

# TODO good
# Reset

1.checkout reset_question
2.git log
   1.git reset --soft HEAD~1 - targets the commit right before the HEAD but the changes in working tree and in the index will stay
   2.git reset --mixed HEAD~1  - targets the commit right before the HEAD and keeps all files the same but unstages the changes.
   3.git reset --hard HEAD~1 - going back to the commit before HEAD and reset the files of the index and the working directory.
   4.git revert HEAD~1  - Create a new commit, reverting changes from the specified commit
3.HEAD~1 means: go back 1 commit from HEAD, using the first parent
HEAD~1 is so common that it can also be shortened to HEAD~.

# TODO good
# Working with GitHub

1.create new repo and name it Devops_Git_Exr,  generate ssh keygen and add it to the ssh keygen agent in the github
2.git remote add origin git@github.com:SharonLeviDevops/Devops_Git_Exr.git
3.git push -u origin main , git push -u origin dev
4. https://github.com/SharonLeviDevops/Devops_Git_Exr
