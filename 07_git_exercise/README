# Git Basics (commit, diff, branches)

1.touch abc.txt && echo "1" > abc.txt
2.red color
3.git add abc.txt and then the color changed to green
4.echo "2" >> abc.txt
5.red again.
6.git diff main
7.There is not difference
8.stage 2 no exist
9.git add abc.txt
10.print nothing
11.git diff --staged main
12.echo "3" >> abc.txt
13."did commit to this branch by mistake"
14.
15.

# Resolve conflicts

1.git branch --list
2.git -b feature/lambda_migration
3.Merge branch feature/version1 into feature/lambda_migration
4.merge branch feature/version2 into feature/lambda_migration
5.
   1.merge
   2.all
   3.annotate with Git Blame
   4.accept number (8081), ignore Narayan's port (8082).
   5.Accept Narayan Nadella's name | ignore Block John's name
6.git log.
(commit 03fd737dc0a09ffc91baeb796a2a6485c1985949
Merge: fbdf689 4073ae5
Author: urits91 <urits91@gmai.com>
Date:   Mon Aug 29 21:03:45 2022 +0300)


# Cherry picking

1.check out "main" , created new branch from "main"
2.git log
3.
    1.()
    2.cherry-picked
4. .env and config.json
5.yes, bc we want the last commit of the branch


# Changes in working tree and switch branches

1.feature/lambda_migration2
2.touch take.txt && git add take.txt
3.git checkout dev
git checkout problem
(a)commit the changes before checking out
(b)Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit.
4.check out dev
5.no,nothing to commit
6.throwing away the local changes

# Reset

1.Checkout reset_question
2.
   1.git reset --soft HEAD~1, new file 10.txt to commit
   reset --soft remove the last commit from the  branc.
   2.untracked files 9.txt and 10.txt
   3.3.7.txt deleted
   4.txt file 5 deleted
3.the previous commit of the last commit


# Working with GitHub

1.
2.git remote add origin https://github.com/url91/myrepo.git
3.git push -u origin main
4.
