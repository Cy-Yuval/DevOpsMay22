# Git Basics (commit, diff, branches)

1. echo "1" >> abc.txt
2. red
3. green
4. echo "2" >> abc.txt
5. same color. before: abc.txt. after: modified:   abc.txt
6. git diff main
7. No changes between index and main
8. There is no stage2 branch
9. git add abc.txt
10. The differences between working tree to index. Because we've just added abc.txt to the index
11. git diff --staged main
12. echo "3" >> abc.txt
13. No. This former shows the diff between index and main, the later shows diff between working tree to main.
14. Because it was modified both in the working tree and in the index
15. git reset --hard

# Resolve conflicts

1.
2.
3.
4.
5.
   1.
   2.
   3.
   4.
   5.
6. This is a merge commit  # https://stackoverflow.com/questions/18584376/git-what-exactly-is-a-merge-commit-in-git

# Cherry picking

1.
2.
3.
    1.
    2.
4.
5. Yes, order is matter


# Changes in working tree and switch branches

1. ...
2. echo "111" >> take.txt; git add take.txt
3. git checkout dev
4. ...
5. No
6. No. Force Checkout discard the working tree when switching branches.

# Reset

1. git checkout reset_question
2.
   1. The last commit (of 10.txt) was reset softly, file 10.txt is in the index now.
   2. The last commit (of 9.txt) was reset, files 9.txt and 10.txt are now in the working tree.
   3. The last commit (of 8.txt) was reset hardly, files 8.txt removed from the index and working tree.
   4. The last commit (of 6.txt) was reverted, addition commit that removes this file was added.
3. HEAD~n   - The n'th generation ancestor of the named commit object (HEAD) in out case


# Working with GitHub

1. ...
2. git remote add origin ...
3. git push origin main; git push origin dev
4. ...
