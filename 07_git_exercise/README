# Git Basics (commit, diff, branches)

#copy init.sh
#bash init.sh
1. sudo echo "1" > abc.txt
2. git status , color : red
3. git add abc.txt
    git status color: green
4. sudo echo '2' >> abc.txt
5. git status , color : red
6. git diff
7. there is no file staged
8. git diff -- check diff between working area and main ,the file does not exists. 'unknown revision or path not in the working tree'
9. sudo git add abc.txt (status color: green)
10. git diff : prints nothing, no changes after commit
11. git diff --staged abc.txt
12. sudo echo "3" >> abc.txt
13. git diff main: diff  between working area and main,  git diff --staged: diff between working tree and main
14. one file at working tree (after commit), one working area before commit
15. git reset --hard

# Resolve conflicts

1. git branch
2. sudo git checkout -b feature/lambda_migration
3. sudo git merge feature/version1
4. from  feature/lambda_migration branch, merge with feature/version2
5.
   1. merge
   2. all
   **********************************************
   **  GEUSSING!!!! have no ubuntu's pycharm   **
   ** C - Sharon Levi's rights!!!              **
   **********************************************
   3. Right click on right and left pages and choose Annotate with Git Blame.
   4. click on accept arrow
   5. click on x symbol
6.yep:
    6.1 version1 branch - Restrict the extensions that can be disabled
    6.2 version2 branch - Nayaran's changes for app.py
    6.3 lambda_migration - Merge branch 'feature/version2' into feature/lambda_migration

# Cherry picking
   **********************************************
   **  GEUSSING!!!! have no ubuntu's pycharm   **
   ** C - Sharon Levi's rights!!!              **
   **********************************************
1. git checkout main ,git checkout -b feature/lambda_migration2
2. go to feature in the local repo and change filter to the feature/lambda_migration
3. click on chery pick  button and choose the requested commits:
    1."use correct lock type in reconnect()"
    2."Restrict the extensions that can be disabled"
4. config.json added to the branch
5. yes , because we want to order the last commit made by the user .


# Changes in working tree and switch branches

1. git checkout main
2. sudo touch take.txt
3.  sudo git checkout dev
    error: The following untracked working tree files would be overwritten by checkout:
        take.txt
    Please move or remove them before you switch branches.
    Aborting
   **********************************************
   **  GEUSSING!!!! have no ubuntu's pycharm   **
   ** C - Sharon Levi's rights!!!              **
   **********************************************
4.on ui choose dev checkout and choose force checkout
5.No changes are lost
6.No the file is lost , force chekcout will remove your last changes your made on the branch.



# Reset

1.  git checkout reset_question
2.
   1.git reset --soft HEAD~1 - keep the changes in files, and stage all changes back
   2.git reset --mixed HEAD~1  - keep the changes in files, and unstages the changes
   3.git reset --hard HEAD~1 - delete any changes and remove them from the local directory
   4.git revert HEAD~1  - creates a new commit, reverting changes from a specified commit
3. HEAD~1: go back 1 commit from HEAD


# Working with GitHub

1. create newRepoExercise
2. git remote add origin https://github.com/gadidan/newRepoExersice.git
3. git push -u origin main , git push -u origin dev
4. https://github.com/gadidan/newRepoExersice.git
