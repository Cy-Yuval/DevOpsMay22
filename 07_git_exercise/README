# Git Basics (commit, diff, branches)

1.echo "1" > abc.txt
2. git status color is Red
3. git add command : color is Green | git commit + message
4.echo "2" >> abc.txt
5. There are no different in the colors both are Red | The difference is when we created the file the git status alerting that
the file need to be added -- and after committing the file it is alerting that the file has been modified
6. git diff
7. it is not printing anything because the file abc.txt currently in the working tree if the file was committed it would have
shown.
8.because stage2 is an unknown file or path
9. again in order to add the file we need to use the command : Git add :
can be checked if the file has been added by git status
10. nothing but @@ -0,0 +1,16 @@  this because  there are no different  between the working tree to the staging
if the file has been changed it will print  the changes
11.  the command is : git diff --staged abc.txt:
12 .echo "3" >> abc.txt
13.it may appear on the first glance that it is the same output but no
they both checking different things one is the diff between files to staged
and one between current main to staged
14. one to tell you the file needs to be
 committed and one to tell you if you want to restore to previous type-git restore <file>
15. git reset --hard

# Resolve conflicts

1.git branch
2.git checkout -b feature/lambda_migration
3.first commit all working files in order to use the git merge command
4.did the following commands in git ui
5.
   1.i clicked on merge
   2.then the button all
   3. then i did on both side annotate with git blame
   4. accepted doe port number denied Narayan port number
   5. accepted Narayan function Denied function
6.Yes there are a new commits from Doe and Narayan
for version2 branch -Narayan's changes for app.py
for lambada_migration Restrict the extensions that can be disabled

# Cherry picking

1.git checkout -b feature/lambda_migration2
2.change filter in the log
3.choose with cherry pick the following ones ir order by description
    1.use correct lock type in reconnect()
    2.Restrict the extensions that can be disabled
4. .env/ config.json
5.yes . to have orders in the commits


# Changes in working tree and switch branches

1 checked to ensure im in feature/lambda_migration2
2.echo >> take.txt 123 123 123 / git add take.txt
3.git checkout problem  need to commit before changing branches
4.clicked on dev and checked out then forced checked out
5.No. it was encoded with gibberish
6.No. i dont have it there it takes it with you and leave it in the branch you forced checkout

# Reset

1.checkout reset_question
2.git log
   1. 1.git reset --soft HEAD~1 | takes the commit right before the HEAD but the changes in working tree and in the index will remain
   2.git reset --mixed HEAD~1  | takes  the commit right before the HEAD and keeps all files the same but unstages the changes.
   3.git reset --hard HEAD~1 -|going back to the commit before HEAD and reset the files of the index and the working directory.
   4.git revert HEAD~1  | Undo the last commit you did
3. goes back 1 commit before HEAD


# Working with GitHub
1.
2.
3.
4.
