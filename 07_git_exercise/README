# Git Basics (commit, diff, branches)

1.using touch abc.txt --- echo "1">abc.txt
2.the color is red - using git status
3.git add--abc.txt using git status color green commit using git commit -m "add the new file abc.txt"
4.using echo "2">abc.txt
5.the color is different red file modified
6.git diff
7.using git diff --staged It doesnt show any changes because the file abc.txt is in working tree
8.diff stage2 return fatal error because stage 2 in unknown path and it is not in the working tree and we sould use the separator -- before.
9.git add abc.txt  using git status = green
10.git diff print nothing because all of the changes as been commented!  # TODO should print something because you've just added abc.txt
11.git diff --staged
12. using echo 3 >> abc.txt
13.not the same output because the git diff shows the different between the working area to the staging area.
14.the file appear twice because one time (add 2) we commented the file color green.and the second time we change the file (add 3) the color is red
   and it let you know that you need to commit one file.
15.git reset --hard

# TODO good
# Resolve conflicts

1. git branch
2.git checkout -b feature/lambda_migration
3.git merge feature/version1
4.using Pycharm UI.
5. conflict resolved using GUI
   1. click merge.
   2. i use all to resolve all conflict
   3. checking the author of the commit with git blame
   4. i accepted port 8081 by John,and denied Narayan's port 8082
   5. i accepted get_profile_picture as the function name and blocked John's name.
6.yes, there was two new commits the first one is the merge we did throw the cli and the second one
 is the merge we did throw the gui.

# TODO good
# Cherry picking

1.git checkout -b feature/lambda_migration2
2.i changed filter in the log using pycharm ui.
3. i used cherry pick by the following the  order by description
    1.use correct lock type in reconnect()
    2.Restrict the extensions that can be disabled
4.env and config.json
5.yes the order is important you need to pick the right files in the right order of code for the changes to work correctly.


# Changes in working tree and switch branches

1.git branch- we on the right one!
2.touch take.txt nano hello world hi devopes
3.using git checkout dev
4.git checkout --force dev i tried it
5.take.txt has no changes
6.no changes.

# Reset

1.git checkout reset_question
2.git log
   1. git reset --soft HEAD~1 Remove the last commit from the current branch,the file changes will remain in the working tree.  # TODO *remain in the index (not the working tree)
   2. git reset --mixed HEAD~1 "keep the changes in your working tree but not on the index, if you want to commit, you have to add the changes before commit."
   3. git reset --hard HEAD~1 "this action delete all committed files from the last commit.
   4. git revert HEAD~1 Undo the last Git commit
3. HEAD~1 delete the files from the last commit and create new commit

# TODO good
# Working with GitHub

1.create new repo and name it myrepo,  generate ssh keygen and add it to the ssh keygen agent in the github
2.Add this repo as a remote (origin) to the local repo you've worked on along this exercise
3.git push origin dev , git push origin main
4.Copy and paste the link to your GitHub repo in the README answers file


https://github.com/Eli-abukrat/myrepo.git
