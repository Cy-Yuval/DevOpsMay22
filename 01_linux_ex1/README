814c5723c21e7e90a3eae36c8df3c513


Kernel System Calls
-------------------

when we ran the whatIdo executable a few things happened in the background before the program ran this call the most common things that happened are:
 - a child process is created to load the new program.
 - the process gets a memory address from the kernel.
 - the kernel checks permissions on the file.
 - the kernel map the memory location with the size of the file he got from the fstat() function and the preparation end with the close() function.
 after the preparation, the kernel opens the file with the openat() function and creates welcomeToDevOpsMay22/goodLuck and then
 the kernel uses the write() function to write "There you go... tell me what I d"... all of this process ends with close() and exit_group().



Broken Symlink
-------------------
because we created the soft link without giving it an absolute path the soft link was created pointing on the current directory,
when we moved the soft link to the backup directory the soft link couldn't find the file he was pointing to.
in order to fix this problem we will need to create the link again with the command:
ln -s $FILENAME backup.obj only this time instead using only the variable $FILENAME we will use its absolute path
to make sure that as long as the original file didnt move we will be able to move the soft link as much as we want.
ln -s full_path/$FILENAME backup.obj
we can verify the full path of the object with the command/tool realpath.


Binary Numbers
--------------

 1. conversion between binary to decimal numbers
 a.111 = 1*2^2 + 1*2^1 + 1*2^0 = 4 + 2 + 1 = 7
 b.100 = 1*2^2 + 0*2^1 + 0*2^0 = 4 + 0 + 0 = 4
 c.10110 = 1*2^4 + 0*2^3 + 1*2^2 + 1*2^1 + 0*2^0 = 16+0+4+2+0 = 22

2. decimal range in 8 bit
full 8 bit use - 11111111 =
1*2^7 + 1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 1*2^2 1*2^1 1*2^0 = 128+64+32+16+8+4+2+1 = 255

3. negative number in 9 bits
in order to represent a negative number we need to use the ninth bit that in charge on the positive(0) and negative(1) value
9 bit use - 111111111 =
negative 1*2^7 + 1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 1*2^2 1*2^1 1*2^0 = 128+64+32+16+8+4+2+1 = -255

4. representing a floating point number


